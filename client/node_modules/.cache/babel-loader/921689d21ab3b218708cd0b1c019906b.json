{"ast":null,"code":"function createCell(i, j) {\n  return {\n    pos: {\n      i: i,\n      j: j\n    },\n    piece: null\n  };\n}\n\nexport function createBoard(n) {\n  const board = {\n    n: n,\n    cells: []\n  };\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      board.cells.push(createCell(i, j));\n    }\n  }\n\n  const settedBoard = setupBoard(board);\n  return settedBoard;\n}\n\nfunction setPiece(board, type, color, i, j) {\n  const cell = board.cells[j + i * board.n];\n  cell.piece = {\n    color: color,\n    type: type\n  };\n}\n\nfunction setupBoard(board) {\n  const newBoard = board;\n  setPiece(newBoard, \"R\", \"black\", 0, 0);\n  setPiece(newBoard, \"N\", \"black\", 0, 1);\n  setPiece(newBoard, \"B\", \"black\", 0, 2);\n  setPiece(newBoard, \"Q\", \"black\", 0, 3);\n  setPiece(newBoard, \"K\", \"black\", 0, 4);\n  setPiece(newBoard, \"B\", \"black\", 0, 5);\n  setPiece(newBoard, \"N\", \"black\", 0, 6);\n  setPiece(newBoard, \"R\", \"black\", 0, 7);\n  setPiece(newBoard, \"P\", \"black\", 1, 0);\n  setPiece(newBoard, \"P\", \"black\", 1, 1);\n  setPiece(newBoard, \"P\", \"black\", 1, 2);\n  setPiece(newBoard, \"P\", \"black\", 1, 3);\n  setPiece(newBoard, \"P\", \"black\", 1, 4);\n  setPiece(newBoard, \"P\", \"black\", 1, 5);\n  setPiece(newBoard, \"P\", \"black\", 1, 6);\n  setPiece(newBoard, \"P\", \"black\", 1, 7);\n  setPiece(newBoard, \"R\", \"white\", 7, 0);\n  setPiece(newBoard, \"N\", \"white\", 7, 1);\n  setPiece(newBoard, \"B\", \"white\", 7, 2);\n  setPiece(newBoard, \"Q\", \"white\", 7, 3);\n  setPiece(newBoard, \"K\", \"white\", 7, 4);\n  setPiece(newBoard, \"B\", \"white\", 7, 5);\n  setPiece(newBoard, \"N\", \"white\", 7, 6);\n  setPiece(newBoard, \"R\", \"white\", 7, 7);\n  setPiece(newBoard, \"P\", \"white\", 6, 0);\n  setPiece(newBoard, \"P\", \"white\", 6, 1);\n  setPiece(newBoard, \"P\", \"white\", 6, 2);\n  setPiece(newBoard, \"P\", \"white\", 6, 3);\n  setPiece(newBoard, \"P\", \"white\", 6, 4);\n  setPiece(newBoard, \"P\", \"white\", 6, 5);\n  setPiece(newBoard, \"P\", \"white\", 6, 6);\n  setPiece(newBoard, \"P\", \"white\", 6, 7);\n  return newBoard;\n}\n\nfunction validMoves(board, color, moves) {\n  return moves.filter(move => {\n    const target = move.j + move.i * board.n;\n    return move.i >= 0 && move.i < board.n && move.j >= 0 && move.j < board.n && (board.cells[target].piece === null || board.cells[target].piece.color !== color);\n  });\n}\n\nfunction PawnMoves(board, {\n  i,\n  j\n}, color) {\n  const facing = color === \"black\" ? 1 : -1;\n  const moves = [{\n    i: i + facing,\n    j: j + facing\n  }, {\n    i: i + facing,\n    j: j - facing\n  }];\n  console.log(board.cells[j + i * board.n]);\n  return validMoves(board, color, moves);\n}\n\n_c = PawnMoves;\n\nfunction getMoves(board, {\n  pos,\n  piece\n}) {\n  let moves = [];\n\n  switch (piece) {\n    case \"P\":\n      moves = PawnMoves(board, pos, piece.color);\n      break;\n\n    default:\n      break;\n  }\n\n  return moves;\n}\n\nconst board = createBoard(8);\nconsole.log(PawnMoves(board, {\n  i: 1,\n  j: 1\n}, \"black\"));\n\nvar _c;\n\n$RefreshReg$(_c, \"PawnMoves\");","map":{"version":3,"sources":["/home/jorge/github/chess/src/components/Board/boardUtils.js"],"names":["createCell","i","j","pos","piece","createBoard","n","board","cells","push","settedBoard","setupBoard","setPiece","type","color","cell","newBoard","validMoves","moves","filter","move","target","PawnMoves","facing","console","log","getMoves"],"mappings":"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","sourcesContent":["function createCell(i,j){\n\treturn {pos:{i:i,j:j}\n\t\t\t\t\t,piece: null };\n}\n\nexport function createBoard(n){\n\tconst board={n:n,cells:[]};\n\tfor(let i=0;i<n;i++){\n\t\tfor(let j =0;j<n;j++){\n\t\t\tboard.cells.push(createCell(i,j));\n\t\t}\n\t}\n\tconst settedBoard = setupBoard(board);\n\treturn settedBoard;\n}\nfunction setPiece(board,type,color,i,j){\n\tconst cell= board.cells[j + i*board.n];\n\tcell.piece = {color:color,type:type};\n}\nfunction setupBoard(board){\n\tconst newBoard = board;\n\tsetPiece(newBoard,\"R\",\"black\",0,0);\n\tsetPiece(newBoard,\"N\",\"black\",0,1);\n\tsetPiece(newBoard,\"B\",\"black\",0,2);\n\tsetPiece(newBoard,\"Q\",\"black\",0,3);\n\tsetPiece(newBoard,\"K\",\"black\",0,4);\n\tsetPiece(newBoard,\"B\",\"black\",0,5);\n\tsetPiece(newBoard,\"N\",\"black\",0,6);\n\tsetPiece(newBoard,\"R\",\"black\",0,7);\n\tsetPiece(newBoard,\"P\",\"black\",1,0);\n\tsetPiece(newBoard,\"P\",\"black\",1,1);\n\tsetPiece(newBoard,\"P\",\"black\",1,2);\n\tsetPiece(newBoard,\"P\",\"black\",1,3);\n\tsetPiece(newBoard,\"P\",\"black\",1,4);\n\tsetPiece(newBoard,\"P\",\"black\",1,5);\n\tsetPiece(newBoard,\"P\",\"black\",1,6);\n\tsetPiece(newBoard,\"P\",\"black\",1,7);\t\n\t\n\tsetPiece(newBoard,\"R\",\"white\",7,0);\n\tsetPiece(newBoard,\"N\",\"white\",7,1);\n\tsetPiece(newBoard,\"B\",\"white\",7,2);\n\tsetPiece(newBoard,\"Q\",\"white\",7,3);\n\tsetPiece(newBoard,\"K\",\"white\",7,4);\n\tsetPiece(newBoard,\"B\",\"white\",7,5);\n\tsetPiece(newBoard,\"N\",\"white\",7,6);\n\tsetPiece(newBoard,\"R\",\"white\",7,7);\n\tsetPiece(newBoard,\"P\",\"white\",6,0);\n\tsetPiece(newBoard,\"P\",\"white\",6,1);\n\tsetPiece(newBoard,\"P\",\"white\",6,2);\n\tsetPiece(newBoard,\"P\",\"white\",6,3);\n\tsetPiece(newBoard,\"P\",\"white\",6,4);\n\tsetPiece(newBoard,\"P\",\"white\",6,5);\n\tsetPiece(newBoard,\"P\",\"white\",6,6);\n\tsetPiece(newBoard,\"P\",\"white\",6,7);\n\n\treturn newBoard;\n}\n\n\nfunction validMoves(board,color,moves){\n\treturn moves.filter(move =>{\n\t\tconst target = move.j+move.i*board.n;\n\t\treturn (\n\t\t\tmove.i >=0 && move.i < board.n && move.j >=0 && move.j<board.n &&\n\t\t\t(board.cells[target].piece ===null || board.cells[target].piece.color !== color)\n\t\t);\n\t})\n}\nfunction PawnMoves(board,{i,j},color){\n\tconst facing = color === \"black\"?1:-1\n\tconst moves = [{i:i+facing,j:j+facing},\n\t\t\t\t\t\t\t\t {i:i+facing,j:j-facing}]\n\tconsole.log(board.cells[j+i*board.n]);\n\treturn validMoves(board,color,moves);\n}\nfunction getMoves(board,{pos,piece}){\n\tlet moves= [];\n\tswitch (piece) {\n\t\tcase \"P\":\n\t\t\tmoves = PawnMoves(board,pos,piece.color);\n\t\t\tbreak;\n\t\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\treturn moves;\n}\n\nconst board = createBoard(8);\n\nconsole.log(PawnMoves(board,{i:1,j:1},\"black\"));\n"]},"metadata":{},"sourceType":"module"}