{"ast":null,"code":"var _jsxFileName = \"/home/jorge/github/chess/src/components/Board/Board.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cells/Cell\";\nimport styles from \"./Board.module.css\";\nimport { createBoard } from \"./boardUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board() {\n  _s();\n\n  function handleClick(target) {\n    if (selected === null) {\n      selected = target;\n    } else {\n      setCells(prev => {\n        const newCells = prev;\n        const selectedCell = selected.j + selected.i * prev.n;\n        const targetCell = target.j + target.i * prev.n;\n        console.log(selectedCell);\n        console.log(targetCell);\n        console.log(prev[selectedCell].piece);\n        newCells[targetCell].piece = prev.cells[selectedCell].piece;\n        newCells[selectedCell].piece = null;\n        selected = null;\n        return newCells;\n      });\n    }\n  }\n\n  const n = 8;\n  const board = createBoard(n);\n  const [cells, setCells] = useState(board.cells);\n  let selected = null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.board,\n    children: cells.map((cell, index) => /*#__PURE__*/_jsxDEV(Cell, {\n      n: board.n,\n      i: cell.i,\n      j: cell.j,\n      piece: cell.piece,\n      onSelected: handleClick\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 4\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Board, \"XWYUXl459Vgb2B2v9rj89Ie4n2s=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/home/jorge/github/chess/src/components/Board/Board.jsx"],"names":["React","useState","Cell","styles","createBoard","Board","handleClick","target","selected","setCells","prev","newCells","selectedCell","j","i","n","targetCell","console","log","piece","cells","board","map","cell","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAAQC,WAAR,QAA0B,cAA1B;;;AAIA,SAASC,KAAT,GAAgB;AAAA;;AACf,WAASC,WAAT,CAAqBC,MAArB,EAA4B;AAE3B,QAAGC,QAAQ,KAAK,IAAhB,EAAqB;AACpBA,MAAAA,QAAQ,GAAGD,MAAX;AACA,KAFD,MAEK;AACJE,MAAAA,QAAQ,CAACC,IAAI,IAAG;AACf,cAAMC,QAAQ,GAAGD,IAAjB;AACA,cAAME,YAAY,GAAGJ,QAAQ,CAACK,CAAT,GAAWL,QAAQ,CAACM,CAAT,GAAWJ,IAAI,CAACK,CAAhD;AACA,cAAMC,UAAU,GAAGT,MAAM,CAACM,CAAP,GAASN,MAAM,CAACO,CAAP,GAASJ,IAAI,CAACK,CAA1C;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYN,YAAZ;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYR,IAAI,CAACE,YAAD,CAAJ,CAAmBO,KAA/B;AACAR,QAAAA,QAAQ,CAACK,UAAD,CAAR,CAAqBG,KAArB,GAA6BT,IAAI,CAACU,KAAL,CAAWR,YAAX,EAAyBO,KAAtD;AACAR,QAAAA,QAAQ,CAACC,YAAD,CAAR,CAAuBO,KAAvB,GAA+B,IAA/B;AACAX,QAAAA,QAAQ,GAAG,IAAX;AACA,eAAOG,QAAP;AACA,OAXO,CAAR;AAYA;AACD;;AACD,QAAMI,CAAC,GAAE,CAAT;AACA,QAAMM,KAAK,GAAGjB,WAAW,CAACW,CAAD,CAAzB;AACA,QAAM,CAACK,KAAD,EAAOX,QAAP,IAAmBR,QAAQ,CAACoB,KAAK,CAACD,KAAP,CAAjC;AACA,MAAIZ,QAAQ,GAAG,IAAf;AACA,sBACC;AAAK,IAAA,SAAS,EAAEL,MAAM,CAACkB,KAAvB;AAAA,cACED,KAAK,CAACE,GAAN,CAAU,CAACC,IAAD,EAAMC,KAAN,kBACX,QAAC,IAAD;AAEA,MAAA,CAAC,EAAEH,KAAK,CAACN,CAFT;AAGA,MAAA,CAAC,EAAEQ,IAAI,CAACT,CAHR;AAIA,MAAA,CAAC,EAAES,IAAI,CAACV,CAJR;AAKA,MAAA,KAAK,EAAEU,IAAI,CAACJ,KALZ;AAMA,MAAA,UAAU,EAAEb;AANZ,OACMkB,KADN;AAAA;AAAA;AAAA;AAAA,YADC;AADF;AAAA;AAAA;AAAA;AAAA,UADD;AAaA;;GArCQnB,K;;KAAAA,K;AAwCT,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cells/Cell\";\nimport styles from \"./Board.module.css\"\nimport {createBoard} from \"./boardUtils\"\n\n\n\nfunction Board(){\n\tfunction handleClick(target){\n\n\t\tif(selected === null){\n\t\t\tselected = target;\n\t\t}else{\n\t\t\tsetCells(prev =>{\n\t\t\t\tconst newCells = prev;\n\t\t\t\tconst selectedCell = selected.j+selected.i*prev.n;\n\t\t\t\tconst targetCell = target.j+target.i*prev.n;\n\t\t\t\tconsole.log(selectedCell);\n\t\t\t\tconsole.log(targetCell);\n\t\t\t\tconsole.log(prev[selectedCell].piece);\n\t\t\t\tnewCells[targetCell].piece = prev.cells[selectedCell].piece;\n\t\t\t\tnewCells[selectedCell].piece = null;\n\t\t\t\tselected = null;\n\t\t\t\treturn newCells\n\t\t\t})\n\t\t}\n\t}\n\tconst n =8;\n\tconst board = createBoard(n);\n\tconst [cells,setCells] = useState(board.cells);\n\tlet selected = null;\n\treturn (\n\t\t<div className={styles.board}>\n\t\t\t{cells.map((cell,index) =>\n\t\t\t<Cell \n\t\t\tkey ={index}\n\t\t\tn={board.n} \n\t\t\ti={cell.i} \n\t\t\tj={cell.j} \n\t\t\tpiece={cell.piece}\n\t\t\tonSelected={handleClick}\n\t\t\t/>)}\n\t\t</div>\n\t)\n}\n\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}