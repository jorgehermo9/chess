{"ast":null,"code":"var _jsxFileName = \"/home/jorge/github/chess/src/components/Board/Board.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cells/Cell\";\nimport styles from \"./Board.module.css\";\nimport { createBoard, getMoves } from \"./boardUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board() {\n  _s();\n\n  function handleClick(target) {\n    if (selected === null) {\n      if (target.piece !== null) {\n        setSelected(target);\n        setMoves(getMoves(board, target));\n        console.log(getMoves(board, target));\n      }\n    } else {\n      if (target.piece === null || target.piece.color !== selected.piece.color) {\n        setBoard(prev => {\n          const newBoard = prev;\n          const selectedCell = selected.pos.j + selected.pos.i * prev.n;\n          const targetCell = target.pos.j + target.pos.i * prev.n;\n          newBoard.cells[targetCell].piece = prev.cells[selectedCell].piece;\n          newBoard.cells[selectedCell].piece = null;\n          return newBoard;\n        });\n      }\n\n      setSelected(null);\n      setMoves([]);\n    }\n  }\n\n  const n = 8;\n  const [board, setBoard] = useState(createBoard(n));\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setMoves] = useState([]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.board,\n    children: board.cells.map((cell, index) => /*#__PURE__*/_jsxDEV(Cell, {\n      n: board.n,\n      pos: cell.pos,\n      piece: cell.piece,\n      validMove: validMoves.some(move => move.i === cell.pos.i && move.j === cell.pos.j),\n      onSelected: handleClick\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Board, \"0lQFasyI+UL9c/YEpw5Lggp4KVo=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/home/jorge/github/chess/src/components/Board/Board.jsx"],"names":["React","useState","Cell","styles","createBoard","getMoves","Board","handleClick","target","selected","piece","setSelected","setMoves","board","console","log","color","setBoard","prev","newBoard","selectedCell","pos","j","i","n","targetCell","cells","validMoves","map","cell","index","some","move"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAAQC,WAAR,EAAoBC,QAApB,QAAmC,cAAnC;;;AAIA,SAASC,KAAT,GAAgB;AAAA;;AACf,WAASC,WAAT,CAAqBC,MAArB,EAA4B;AAE3B,QAAGC,QAAQ,KAAK,IAAhB,EAAqB;AACpB,UAAGD,MAAM,CAACE,KAAP,KAAgB,IAAnB,EAAwB;AACvBC,QAAAA,WAAW,CAACH,MAAD,CAAX;AACAI,QAAAA,QAAQ,CAACP,QAAQ,CAACQ,KAAD,EAAOL,MAAP,CAAT,CAAR;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAYV,QAAQ,CAACQ,KAAD,EAAOL,MAAP,CAApB;AACA;AACD,KAND,MAMK;AACJ,UAAGA,MAAM,CAACE,KAAP,KAAiB,IAAjB,IACFF,MAAM,CAACE,KAAP,CAAaM,KAAb,KAAuBP,QAAQ,CAACC,KAAT,CAAeM,KADvC,EAC6C;AAC5CC,QAAAA,QAAQ,CAACC,IAAI,IAAG;AACf,gBAAMC,QAAQ,GAAGD,IAAjB;AACA,gBAAME,YAAY,GAAGX,QAAQ,CAACY,GAAT,CAAaC,CAAb,GAAeb,QAAQ,CAACY,GAAT,CAAaE,CAAb,GAAeL,IAAI,CAACM,CAAxD;AACA,gBAAMC,UAAU,GAAGjB,MAAM,CAACa,GAAP,CAAWC,CAAX,GAAad,MAAM,CAACa,GAAP,CAAWE,CAAX,GAAaL,IAAI,CAACM,CAAlD;AACAL,UAAAA,QAAQ,CAACO,KAAT,CAAeD,UAAf,EAA2Bf,KAA3B,GAAmCQ,IAAI,CAACQ,KAAL,CAAWN,YAAX,EAAyBV,KAA5D;AACAS,UAAAA,QAAQ,CAACO,KAAT,CAAeN,YAAf,EAA6BV,KAA7B,GAAqC,IAArC;AACA,iBAAOS,QAAP;AACA,SAPO,CAAR;AAQA;;AACDR,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAC,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACA;AACD;;AACD,QAAMY,CAAC,GAAE,CAAT;AACA,QAAM,CAACX,KAAD,EAAOI,QAAP,IAAmBhB,QAAQ,CAACG,WAAW,CAACoB,CAAD,CAAZ,CAAjC;AACA,QAAM,CAACf,QAAD,EAAUE,WAAV,IAAyBV,QAAQ,CAAC,IAAD,CAAvC;AACA,QAAM,CAAC0B,UAAD,EAAYf,QAAZ,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;AACA,sBACC;AAAK,IAAA,SAAS,EAAEE,MAAM,CAACU,KAAvB;AAAA,cACEA,KAAK,CAACa,KAAN,CAAYE,GAAZ,CAAgB,CAACC,IAAD,EAAMC,KAAN,kBACjB,QAAC,IAAD;AAEA,MAAA,CAAC,EAAEjB,KAAK,CAACW,CAFT;AAGA,MAAA,GAAG,EAAEK,IAAI,CAACR,GAHV;AAIA,MAAA,KAAK,EAAEQ,IAAI,CAACnB,KAJZ;AAKA,MAAA,SAAS,EAAEiB,UAAU,CAACI,IAAX,CAAiBC,IAAD,IACtBA,IAAI,CAACT,CAAL,KAAWM,IAAI,CAACR,GAAL,CAASE,CAApB,IAAyBS,IAAI,CAACV,CAAL,KAASO,IAAI,CAACR,GAAL,CAASC,CADrC,CALX;AAOA,MAAA,UAAU,EAAEf;AAPZ,OACMuB,KADN;AAAA;AAAA;AAAA;AAAA,YADC;AADF;AAAA;AAAA;AAAA;AAAA,UADD;AAcA;;GA3CQxB,K;;KAAAA,K;AA8CT,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cells/Cell\";\nimport styles from \"./Board.module.css\"\nimport {createBoard,getMoves} from \"./boardUtils\"\n\n\n\nfunction Board(){\n\tfunction handleClick(target){\n\n\t\tif(selected === null){\n\t\t\tif(target.piece !==null){\n\t\t\t\tsetSelected(target);\n\t\t\t\tsetMoves(getMoves(board,target));\n\t\t\t\tconsole.log(getMoves(board,target));\n\t\t\t}\n\t\t}else{\n\t\t\tif(target.piece === null || \n\t\t\t\ttarget.piece.color !== selected.piece.color){\n\t\t\t\tsetBoard(prev =>{\n\t\t\t\t\tconst newBoard = prev;\n\t\t\t\t\tconst selectedCell = selected.pos.j+selected.pos.i*prev.n;\n\t\t\t\t\tconst targetCell = target.pos.j+target.pos.i*prev.n;\n\t\t\t\t\tnewBoard.cells[targetCell].piece = prev.cells[selectedCell].piece;\n\t\t\t\t\tnewBoard.cells[selectedCell].piece = null;\n\t\t\t\t\treturn newBoard;\n\t\t\t\t});\n\t\t\t}\n\t\t\tsetSelected(null);\n\t\t\tsetMoves([]);\n\t\t}\n\t}\n\tconst n =8;\n\tconst [board,setBoard] = useState(createBoard(n));\n\tconst [selected,setSelected] = useState(null);\n\tconst [validMoves,setMoves] = useState([]);\n\treturn (\n\t\t<div className={styles.board}>\n\t\t\t{board.cells.map((cell,index) =>\n\t\t\t<Cell \n\t\t\tkey ={index}\n\t\t\tn={board.n}\n\t\t\tpos={cell.pos} \n\t\t\tpiece={cell.piece}\n\t\t\tvalidMove={validMoves.some((move) => \n\t\t\t\t\t\t\t\tmove.i === cell.pos.i && move.j===cell.pos.j )}\n\t\t\tonSelected={handleClick}\n\t\t\t/>)}\n\t\t</div>\n\t)\n}\n\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}